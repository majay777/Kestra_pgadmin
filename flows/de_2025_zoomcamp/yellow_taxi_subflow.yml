id: yellow_taxi_subflow
namespace: null

inputs:
  - id: taxi
    type: ARRAY
    itemType: STRING
    displayName: Choose Taxi
    description: Choose the taxi, which data to get from url.
    defaults:
      - yellow
      - green
    
  
  - id: year
    type: ARRAY
    itemType: STRING
    displayName: Select Year
    defaults:
      - '2021'
      - '2019'
    
  
  - id: month
    type: ARRAY
    itemType: STRING
    displayName: Select a month
    defaults:
      - '01'
      - '02'

tasks:
  - id: if_yellow_taxi
    type: io.kestra.plugin.core.flow.If
    condition: '{{ inputs.taxi == "yellow" }}'
    then:
      - id: yellow_create_table
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: |
            CREATE TABLE IF NOT EXISTS "public.{{inputs.taxi}}_tripdata" (
                          unique_row_id          text,
                          filename               text,
                          VendorID               text,
                          tpep_pickup_datetime   timestamp,
                          tpep_dropoff_datetime  timestamp,
                          passenger_count        float,
                          trip_distance          double precision,
                          RatecodeID             text,
                          store_and_fwd_flag     text,
                          PULocationID           text,
                          DOLocationID           text,
                          payment_type           float,
                          fare_amount            double precision,
                          extra                  double precision,
                          mta_tax                double precision,
                          tip_amount             double precision,
                          tolls_amount           double precision,
                          improvement_surcharge  double precision,
                          total_amount           double precision,
                          congestion_surcharge   double precision
                          );
    
      - id: create_yellow_staging_table
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: |
                        CREATE TABLE IF NOT EXISTS public.{{inputs.taxi}}_tripdata_staging (
                        unique_row_id          text,
                        filename               text,
                        VendorID               text,
                        tpep_pickup_datetime   timestamp,
                        tpep_dropoff_datetime  timestamp,
                        passenger_count        float,
                        trip_distance          double precision,
                        RatecodeID             text,
                        store_and_fwd_flag     text,
                        PULocationID           text,
                        DOLocationID           text,
                        payment_type           float,
                        fare_amount            double precision,
                        extra                  double precision,
                        mta_tax                double precision,
                        tip_amount             double precision,
                        tolls_amount           double precision,
                        improvement_surcharge  double precision,
                        total_amount           double precision,
                        congestion_surcharge   double precision
                        );

      - id: truncate_yellow_Table
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: |
                          TRUNCATE TABLE public.{{inputs.taxi}}_tripdata_staging
        
      - id: yellow_copy_in_staging_table
        type: io.kestra.plugin.jdbc.postgresql.CopyIn
        format: CSV
        from: "{{ outputs.Extract_data.outputFiles[{{inputs.taxi}}_taxi_tripdata_{{inputs.year}}_{{inputs.month}}.csv]}}"
        table: public.{{inputs.taxi}}_tripdata_staging
        header: true
        columns: [VendorID,tpep_pickup_datetime,tpep_dropoff_datetime,passenger_count,trip_distance,RatecodeID,store_and_fwd_flag,PULocationID,DOLocationID,payment_type,fare_amount,extra,mta_tax,tip_amount,tolls_amount,improvement_surcharge,total_amount,congestion_surcharge]

      - id: yellow_add_unique_key_and_filename
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: |
                        UPDATE {{public.{{inputs.taxi}}_tripdata_staging}}
                        SET 
                          unique_row_id = md5(
                            COALESCE(CAST(VendorID AS text), '') ||
                            COALESCE(CAST(tpep_pickup_datetime AS text), '') || 
                            COALESCE(CAST(tpep_dropoff_datetime AS text), '') || 
                            COALESCE(PULocationID, '') || 
                            COALESCE(DOLocationID, '') || 
                            COALESCE(CAST(fare_amount AS text), '') || 
                            COALESCE(CAST(trip_distance AS text), '')      
                          ),
                          filename = '{{inputs.taxi}}_taxi_tripdata_{{inputs.year}}_{{inputs.month}}.csv';
      - id: yellow_merge_data
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: |
                        MERGE INTO {{public.{{inputs.taxi}}_tripdata}} AS T
                        USING {{public.{{inputs.taxi}}_tripdata_staging}} AS S
                        ON T.unique_row_id = S.unique_row_id
                        WHEN NOT MATCHED THEN
                          INSERT (
                            unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime,
                            passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID,
                            DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount,
                            improvement_surcharge, total_amount, congestion_surcharge
                          )
                          VALUES (
                            S.unique_row_id, S.filename, S.VendorID, S.tpep_pickup_datetime, S.tpep_dropoff_datetime,
                            S.passenger_count, S.trip_distance, S.RatecodeID, S.store_and_fwd_flag, S.PULocationID,
                            S.DOLocationID, S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount,
                            S.improvement_surcharge, S.total_amount, S.congestion_surcharge
                          );


pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values: 
      url: jdbc:postgresql://postgres_db:5432/ny_taxi
      username: ny_taxi_user
      password: ny_taxi_user_password